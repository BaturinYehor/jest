import { authenticate } from './login';
import {
  LOGIN_UNAUTHORIZED_ERROR,
  LOGIN_FORBIDDEN_ERROR,
  LOGIN_DEFAULT_ERROR
} from './constants';

const CREDENTIALS = { username: 'some@email.com', password: 'password1' };

const URL = 'api/authenticate';

describe('Login', () => {
  beforeEach(() => {
    fetch.resetMocks();
  });

  it('Should authenticate user', () => {
    fetch.mockResponseOnce(
      JSON.stringify({ token: 'bearer_token', currentDateTime: '' })
    );

    return authenticate(CREDENTIALS).then(response => {
      expect(response).toEqual('bearer_token');
      expect(fetch.mock.calls.length).toEqual(1);
      expect(fetch.mock.calls[0][0]).toEqual(`${URL}`);
    });
  });

  it('Should handle 401 error', () => {
    fetch.mockResponseOnce(JSON.stringify({}), { ok: false, status: 401 });

    return expect(authenticate(CREDENTIALS)).rejects.toMatch(
      LOGIN_UNAUTHORIZED_ERROR
    );
  });

  it('Should handle 403 error', () => {
    fetch.mockResponseOnce(JSON.stringify({}), { ok: false, status: 403 });

    return expect(authenticate(CREDENTIALS)).rejects.toMatch(
      LOGIN_FORBIDDEN_ERROR
    );
  });

  it('Should handle 500 error', () => {
    fetch.mockResponseOnce(JSON.stringify({}), { ok: false, status: 500 });

    return expect(authenticate(CREDENTIALS)).rejects.toMatch(
      LOGIN_DEFAULT_ERROR
    );
  });
});

***************************

import * as React from 'react';
import LoginComponent from './Login';
import { authenticate } from '../../api/login';
import { setToken } from '../../api/helper';
import { render, fireEvent, waitForElement } from 'react-testing-library';

jest.mock('../../api/login');
jest.mock('../../api/helper');

const EMAIL = 'email@example.com';
const PASSWORD = 'password';

describe('Login', () => {
  beforeEach(() => {
    setToken.mockResolvedValue({});
  });
  afterEach(() => {
    authenticate.mockRestore();
  });

  it('Should be able to enter email and password', () => {
    const { getByLabelText } = render(<LoginComponent />);

    const emailElement = getByLabelText('Email');

    const passwordElement = getByLabelText('Password');

    expect(emailElement).toBeInTheDocument();
    expect(passwordElement).toBeInTheDocument();

    fireEvent.change(emailElement, { target: { value: EMAIL } });
    fireEvent.change(passwordElement, { target: { value: PASSWORD } });

    expect(emailElement.value).toEqual(EMAIL);
    expect(passwordElement.value).toEqual(PASSWORD);
  });

  it('Should be able to submit credentials', () => {
    const { getByText, getByLabelText } = render(<LoginComponent />);

    const buttonElement = getByText('Log In');

    authenticate.mockRejectedValueOnce('token');

    expect(buttonElement).toBeInTheDocument();
    expect(buttonElement.disabled).toBeFalse();

    fireEvent.change(getByLabelText('Email'), { target: { value: EMAIL } });
    fireEvent.change(getByLabelText('Password'), {
      target: { value: PASSWORD }
    });
    fireEvent.click(buttonElement);

    expect(authenticate).toBeCalledTimes(1);
    expect(authenticate).toHaveBeenCalledWith({
      username: EMAIL,
      password: PASSWORD
    });
  });

  it('Should appears server error message', async () => {
    authenticate.mockRejectedValue('Server error message');

    const { getByText, getByLabelText } = render(<LoginComponent />);

    const buttonElement = getByText('Log In');

    fireEvent.change(getByLabelText('Email'), { target: { value: EMAIL } });
    fireEvent.change(getByLabelText('Password'), {
      target: { value: PASSWORD }
    });
    fireEvent.click(buttonElement);

    await waitForElement(() => getByText('Server error message'));

    expect(authenticate).toBeCalledTimes(1);

    expect(getByText('Server error message')).toBeInTheDocument();
  });

  it('Should appears validation error message', () => {
    const { getByText } = render(<LoginComponent />);

    const buttonElement = getByText('Log In');

    fireEvent.click(buttonElement);

    expect(getByText('Email field is required.')).toBeInTheDocument();
    expect(getByText('Password field is required.')).toBeInTheDocument();
    expect(authenticate).toBeCalledTimes(0);
  });
});

sudo yarn test:debug --watch
https://www.robinwieruch.de/react-testing-jest-enzyme
